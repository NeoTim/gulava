/*
 *  Copyright (c) 2015 The Gulava Authors
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */
package gulava;

import static gulava.Goals.disj;

import java.io.IOException;

/**
 * A goal which causes some other goal to be repeated ad-infinitum. The results that would be
 * returned by {@code repeated} are returned by the goal generated by this method. For instance,
 * if {@code repeated} generates substitutions {@code S0} and {@code S1} when given substitution
 * {@code S}, then the generated goal returns {@code S0}, {@code S1}, {@code S0}, {@code S1}, etc.
 */
public final class RepeatedGoal implements Goal, Dumpable {
  private final Goal repeated;
  private final Goal delayed;

  public RepeatedGoal(Goal repeated) {
    this.repeated = repeated;
    this.delayed = new DelayedGoal(this);
  }

  @Override
  public Stream run(Subst s) {
    return disj(repeated, delayed).run(s);
  }

  @Override
  public void dump(Dumper dumper) throws IOException {
    dumper.dump("RepeatedGoal", repeated);
  }
}
